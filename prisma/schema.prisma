// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}
enum Status {
  confirmed
  cancelled
  pending
}


model User {
  id        Int      @id @default(autoincrement())
  username String
  email     String   @unique
  password  String
  role      Role     @default(user)
  bookings  Booking[]
}

model Workshop {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  timeSlots   TimeSlot[]
  bookings    Booking[]
  isDeleted   Boolean    @default(false)
}

model TimeSlot {
  id             Int        @id @default(autoincrement())
  startTime      String
  endTime        String
  maxCapacity Int
  workshop       Workshop   @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  workshopId     Int
  bookings       Booking[]
  isDeleted      Boolean    @default(false)
}

model Booking {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete:Cascade)
  workshopId Int
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  timeSlotId Int
  status     Status   @default(pending)
  createdAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)
}
